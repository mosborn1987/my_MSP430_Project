/*
 * GPIOs.h
 *
 *  Created on: Aug 27, 2015
 *      Author: Mario Osborn
 */

#ifndef LIBRARY_GPIOS_H_
#define LIBRARY_GPIOS_H_

//#include <msp430g2553.h>

/************************************************************
* PORT 1 Definitions
************************************************************/
#define PORT_1                  (1 << 8)
#define P1_0                    ( PORT_1 | BIT0 )
#define P1_1                    ( PORT_1 | BIT1 )
#define P1_2                    ( PORT_1 | BIT2 )
#define P1_3                    ( PORT_1 | BIT3 )
#define P1_4                    ( PORT_1 | BIT4 )
#define P1_5                    ( PORT_1 | BIT5 )
#define P1_6                    ( PORT_1 | BIT6 )
#define P1_7                    ( PORT_1 | BIT7 )

/************************************************************
* PORT 2 Definitions
************************************************************/
#define PORT_2					(2 << 8)
#define P2_0                    ( PORT_2 | BIT0 )
#define P2_1                    ( PORT_2 | BIT1 )
#define P2_2                    ( PORT_2 | BIT2 )
#define P2_3                    ( PORT_2 | BIT3 )
#define P2_4                    ( PORT_2 | BIT4 )
#define P2_5                    ( PORT_2 | BIT5 )
#define P2_6                    ( PORT_2 | BIT6 )
#define P2_7                    ( PORT_2 | BIT7 )

/************************************************************
* PORT 3 Definitions
************************************************************/
#define PORT_3					(3 << 8)
#define P3_0                    ( PORT_3 | BIT0 )
#define P3_1                    ( PORT_3 | BIT1 )
#define P3_2                    ( PORT_3 | BIT2 )
#define P3_3                    ( PORT_3 | BIT3 )
#define P3_4                    ( PORT_3 | BIT4 )
#define P3_5                    ( PORT_3 | BIT5 )
#define P3_6                    ( PORT_3 | BIT6 )
#define P3_7                    ( PORT_3 | BIT7 )
// Add additional PORTS as needed



/************************************************************
* PORT and GPIO MASK
************************************************************/
#define LOW_BYTE_MASK			0x00FF
#define HIGH_BYTE_MASK			0xFF00
#define PORT_MASK               HIGH_BYTE_MASK
#define GPIO_MASK				LOW_BYTE_MASK

/************************************************************
* Logical Definitions
************************************************************/
#define true					1
#define false					0

/************************************************************
* Digital Write Constants
************************************************************/
#define HIGH 					true
#define LOW						false

/************************************************************
* PinMode Constants
************************************************************/
#define OUTPUT					true
#define INPUT					false

//***********************************************************
// Basic Function prototypes
//***********************************************************/
void pinMODE(int GPIO, int I_O_MODE);
void digitalWrite( int GPIO, int Logic_Value);
void Toggle_GPIO( int GPIO );
void turn_ON( int GPIO );
void turn_OFF( int GPIO);
void turn_OFF_ALL(void);
void turn_ON_ALL(void);

//***********************************************************
// Advanced Function prototypes
//***********************************************************/
void power_ON(int GPIO);
void power_OFF(int GPIO);
void power_ON_ALL(void);
void power_OFF_ALL(void);
void power_RESTORE(void);



//***********************************************************
// Basic Function prototypes
//***********************************************************/


//***********************************************************
// pinMODE - This function will set the I/O State of a given
// 			GPIO.
//***********************************************************/
void pinMODE(int GPIO, int I_O_MODE)
{

	//*******************************************************
	// Set PORT_1 Direction
	//*******************************************************
	if( (GPIO & PORT_MASK) == PORT_1 )
	{

		//***************************************************
		// OUTPUT Direction
		//***************************************************
		if(I_O_MODE == OUTPUT)
			P1DIR |= (GPIO & GPIO_MASK);

		//***************************************************
		// INPUT Direction
		//***************************************************
		if (I_O_MODE == INPUT)
			P1DIR &= ~(GPIO & GPIO_MASK);

	}


	//*******************************************************
	// Set PORT_2 Direction
	//*******************************************************
	if((GPIO & PORT_MASK) == PORT_2)
	{

		//***************************************************
		// OUTPUT Direction
		//***************************************************
		if(I_O_MODE == OUTPUT)
			P2DIR |= (GPIO & GPIO_MASK);

		//***************************************************
		// INPUT Direction
		//***************************************************
		if (I_O_MODE == INPUT)
			P2DIR &= ~(GPIO & GPIO_MASK);

	}

	//*******************************************************
	// Add ports as needed
	//*******************************************************


}
/************************************************************
* END - pinMODE
************************************************************/




/************************************************************
* digitalWrite - This function will set the output state of
* 				 a given GPIO pin.
************************************************************/
void digitalWrite( int GPIO, int Logic_Value)
{
	//*******************************************************
	// Set PORT_1 PIN Logic Value
	//*******************************************************
	if( (GPIO & PORT_MASK) == PORT_1 )
	{

		//***************************************************
		// Logic HIGH
		//***************************************************
		if(Logic_Value == HIGH)
			P1OUT |= (GPIO & GPIO_MASK);

		//***************************************************
		// Logic LOW
		//***************************************************
		if (Logic_Value == LOW)
			P1OUT &= ~(GPIO & GPIO_MASK);

	}

	//*******************************************************
	// Set PORT_2 PIN Logic Value
	//*******************************************************
	if((GPIO & PORT_MASK) == PORT_2)
	{
		//***************************************************
		// Note: The default for P2.3 and 2.7 are Xin & Xout
		// Set the pins to GPIO's.
		//***************************************************
//		// Set pin 2.6 to GPIO
//		if((GPIO & PORT_MASK) == BIT6)
//		{
//			P2SEL &= ~(BIT6);
//		}
//
//		// Set pin 2.7 to GPIO
//		if((GPIO & PORT_MASK) == BIT7)
//		{
//			P2SEL &= ~(BIT7);
//		}


		//***************************************************
		// Logic HIGH
		//***************************************************
		if(Logic_Value == HIGH)
			P2OUT |= (GPIO & GPIO_MASK);

		//***************************************************
		// Logic LOW
		//***************************************************
		if (Logic_Value == LOW)
			P2OUT &= ~(GPIO & GPIO_MASK);

	}

	//*******************************************************
	// Add ports as needed
	//*******************************************************

}
/************************************************************
* END - digitalWrite
************************************************************/



/************************************************************
* Toggle_GPIO - This function will set the output state of
* 				 a given GPIO pin.
************************************************************/
void Toggle_GPIO( int GPIO )
{
	//*******************************************************
	// Toggle PORT_1 PIN Logic Value
	//*******************************************************
	if( (GPIO & PORT_MASK) == PORT_1 )
	{

		//***************************************************
		// Toggle GPIO on PORT 1
		//***************************************************
		P1OUT ^= (GPIO & GPIO_MASK);

	}

	//*******************************************************
	// Toggle PORT_2 PIN Logic Value
	//*******************************************************
	if((GPIO & PORT_MASK) == PORT_2)
	{

		//***************************************************
		// Toggle GPIO  on PORT 2
		//***************************************************
		P1OUT ^= (GPIO & GPIO_MASK);

	}

	//*******************************************************
	// Add PORTS as nedded
	//*******************************************************

}
/************************************************************
* END - digitalWrite
************************************************************/

/************************************************************
* turn_ON: This function will set the GPIO out then turn
*          set the PxOUT.
************************************************************/
void turn_ON( int GPIO )
{
	//*******************************************************
	// Turn GPIO pin on PORT_1 'ON'
	//*******************************************************
	if( (GPIO & PORT_MASK) == PORT_1 )
	{

		//***************************************************
		// Set GPIO DIRECTION and OUT
		//***************************************************
		P1DIR |= (GPIO & GPIO_MASK);
		P1OUT |= (GPIO & GPIO_MASK);

	}

	//*******************************************************
	// Turn GPIO pin on PORT_2 'ON'
	//*******************************************************
	if((GPIO & PORT_MASK) == PORT_2)
	{

		//***************************************************
		// Set GPIO DIRECTION and OUT
		//***************************************************
		P2DIR |= (GPIO & GPIO_MASK);
		P2OUT |= (GPIO & GPIO_MASK);

	}

	//*******************************************************
	// Add PORTS as nedded
	//*******************************************************

}


/************************************************************
* turn_OFF: This function will set the GPIO out then turn
*           set the PxOUT.
************************************************************/
void turn_OFF( int GPIO)
{
	//*******************************************************
	// Turn GPIO pin on PORT_1 'OFF'
	//*******************************************************
	if( (GPIO & PORT_MASK) == PORT_1 )
	{

		//***************************************************
		// Set GPIO DIRECTION and INPUT
		//***************************************************
		P1DIR &= ~(GPIO & GPIO_MASK);
		P1OUT &= ~(GPIO & GPIO_MASK);

	}

	//*******************************************************
	// Turn GPIO pin on PORT_2 'OFF'
	//*******************************************************
	if((GPIO & PORT_MASK) == PORT_2)
	{

		//***************************************************
		// Set GPIO DIRECTION and INPUT
		//***************************************************
		P2DIR &= ~(GPIO & GPIO_MASK);
		P2OUT &= ~(GPIO & GPIO_MASK);

	}

	//*******************************************************
	// Add PORTS as nedded
	//*******************************************************

}


//***********************************************************
//
//***********************************************************/
void turn_OFF_ALL(void)
{
	//*******************************************************
	// Sets Output to OFF
	//*******************************************************
	P1OUT = 0x00;
	P2OUT = 0x00;

	//*******************************************************
	// Add PORTS as nedded
	//*******************************************************

}

//***********************************************************
//
//***********************************************************/
void turn_ON_ALL(void)
{
	//*******************************************************
	// Sets Output to ON
	//*******************************************************
	P1OUT = 0xFF;
	P2OUT = 0xFF;

}


//***********************************************************
// Advanced Function prototypes
//***********************************************************/

//***********************************************************
// power_ON: This function will initialize the GPIO and also
//           turn it on.
//***********************************************************/
void power_ON(int GPIO)
{

}

//***********************************************************
// power_OFF: Set the direction of GPIO to input. This
//            will conserve power drain. See msp430g2553
//            data-sheet for more info.
//***********************************************************/
void power_OFF(int GPIO);

//***********************************************************
// power_ON_ALL: This function will initialize all GPIOs
//               and turn them all ON.
//***********************************************************/
void power_ON_ALL(void);

//***********************************************************
// power_OFF_ALL : This function will save the current
//                 settings and turn off all GPIOs.
//***********************************************************/
void power_OFF_ALL(void);

//***********************************************************
// power_RESTORE: This function will take the settings saved
//                by power_OFF_ALL and turn on the GPIOs
//***********************************************************/
void power_RESTORE(void);

#endif /* LIBRARY_GPIOS_H_ */
